package main

import (
	"fmt"
	"io"
	"os"
	"testing"
)

// MultiWriter duplicates the output to both stdout and a file.
type MultiWriter struct {
	stdout io.Writer
	file   io.Writer
}

// Write writes data to both the stdout and the file.
func (mw *MultiWriter) Write(p []byte) (n int, err error) {
	n, err = mw.stdout.Write(p)
	if err != nil {
		return
	}
	_, err = mw.file.Write(p)
	return
}

func TestMain(m *testing.M) {
	// Specify the file path for the output file
	filePath := "/home/tcs/sample/ondatra/debug/rip/test_output.txt"

	// Create or open the file for writing
	file, err := os.Create(filePath)
	if err != nil {
		fmt.Printf("Failed to create file: %s\n", err)
		os.Exit(1)
	}
	defer file.Close()

	// Save the original stdout so we can restore it later
	originalStdout := os.Stdout

	// Create a MultiWriter to duplicate output to both stdout and the file
	mw := &MultiWriter{
		stdout: io.MultiWriter(os.Stdout, file),
		file:   file,
	}

	// Set the MultiWriter as the output for stdout
	os.Stdout = mw

	// Run the tests
	exitCode := m.Run()

	// Restore the original stdout
	os.Stdout = originalStdout

	// Exit with the same exit code as the test
	os.Exit(exitCode)
}
