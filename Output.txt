package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"testing"
)

// MultiWriter writes to both a file and stdout.
type MultiWriter struct {
	File   *os.File
	Stdout io.Writer
}

// Write writes data to both the file and stdout.
func (w *MultiWriter) Write(p []byte) (n int, err error) {
	n, err = w.Stdout.Write(p)
	if err != nil {
		return n, err
	}
	_, err = w.File.Write(p)
	return n, err
}

func TestMain(m *testing.M) {
	// Use the specific path for the log file.
	filePath := "/home/tcs/sample/ondatra/debug/rip/test_output.txt"

	// Open the file for writing.
	logFile, err := os.Create(filePath)
	if err != nil {
		log.Fatalf("Failed to create log file: %v", err)
	}
	defer logFile.Close()

	// Initialize the MultiWriter to write to both os.Stdout and the log file.
	mw := &MultiWriter{
		File:   logFile,
		Stdout: os.Stdout,
	}

	// Set log output to our MultiWriter.
	log.SetOutput(mw)

	// Inform users where the test output will be written.
	fmt.Printf("Writing test output to file: %s\n", filePath)

	// Execute the tests.
	exitVal := m.Run()

	// Final log entry after testing.
	log.Printf("Testing completed. Exiting with status: %d\n", exitVal)

	// Exit with the appropriate status code.
	os.Exit(exitVal)
}
