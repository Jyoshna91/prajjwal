package debug

import (
    "fmt"
    "golang.org/x/crypto/ssh"
    "log"
    "testing"
    "time"
)

func ACLDenyonDevices(acl_namee string, rulee string, boundd string,interff string,ip string , ping_ip string)error {
    acl_name := acl_namee
    rule := rulee
    bound := boundd
    interf := interff
    serverAddress := ip
    serverUsername := "admin"
    serverPassword := "tcs123"
    server2_address := ping_ip
    executeCommand := "ping "+string(server2_address)

    config := &ssh.ClientConfig{
        User: serverUsername,
        Auth: []ssh.AuthMethod{
            ssh.Password(serverPassword),
        },
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    client, err := ssh.Dial("tcp", serverAddress+":22", config)
    if err != nil {
        panic(err)
    }
    defer client.Close()

    session, err := client.NewSession()
    if err !=nil {
        panic(err)
    }
    defer session.Close()

    modes := ssh.TerminalModes{
            ssh.ECHO: 0,
            ssh.TTY_OP_ISPEED: 14400,
            ssh.TTY_OP_OSPEED: 14400,
    }
     if err := session.RequestPty("vt100", 0, 0, modes); err != nil {
        panic(err)
    }

    sshShell, err := session.StdinPipe()
    if err != nil {
        panic(err)
    }

    if err :=session.Shell(); err !=nil {
        panic(err)
    }

    commands := []string{
            "conf t\n",
            fmt.Sprintf("ip access-list %s\n",acl_name),
            fmt.Sprintf("%s\n",rule),
            fmt.Sprintf("exit\n"),
            fmt.Sprintf("int %s\n",interf),
            fmt.Sprintf("ip access-group %s %s\n",acl_name,bound),
            "end\n",
    }

    for _,cmd := range commands {
        sshShell.Write([]byte(cmd))
        time.Sleep(1 * time.Second)
    }

    fmt.Printf("ACL enabled on device %s %s via %s\n", serverAddress,interf,bound)

    // new session for ping
    config1 := &ssh.ClientConfig{
        User: serverUsername,
        Auth: []ssh.AuthMethod{
            ssh.Password(serverPassword),
        },
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    client1, err := ssh.Dial("tcp", serverAddress+":22", config1)
    if err != nil {
        panic(err)
    }
    defer client.Close()

    session1, err := client1.NewSession()
    if err !=nil {
        panic(err)
    }
    defer session1.Close()

    modes1 := ssh.TerminalModes{
            ssh.ECHO: 0,
            ssh.TTY_OP_ISPEED: 14400,
            ssh.TTY_OP_OSPEED: 14400,
    }
     if err := session1.RequestPty("vt100", 0, 0, modes1); err != nil {
        panic(err)
    }

    out, err := session1.CombinedOutput(string(executeCommand))
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("OUTPUT------ %s\n", out)  
    return nil

}

func TestAclDevices(t *testing.T){
/*    err := ACLDenyonDevices("aclp1","permit icmp 192.168.3.2/24 any","in","Ethernet1/11","10.133.35.158", "192.168.3.2")
    if err != nil {
        t.Errorf("Failed to enable ACL on device: %v", err)
    }  */
    err1 := ACLDenyonDevices("aclp1","deny icmp 192.168.3.1/24 any","in","Ethernet1/11","10.133.35.143", "192.168.3.1")
    if err1 != nil {
        t.Errorf("Failed to enable ACL on device: %v", err1)
    }
  
}
